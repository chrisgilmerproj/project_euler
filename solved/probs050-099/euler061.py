# This is a problem from the Project Euler Website
# http://projecteuler.net/
#
# Euler Problem #061
#
# Problem:  Find the sum of the only ordered set of six cyclic 4-digit numbers
#           for which each polygonal type: triangle, square, pentagonal,
#           hexagonal, heptagonal, and octagonal, is represented by a different
#           number in the set.
#
# Hint:     Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal
#           numbers are all figurate (polygonal) numbers and are generated by
#           the following formulae:
#
#           Triangle 	  	P3,n=n(n+1)/2 	  	1, 3, 6, 10, 15, ...
#           Square 	  	P4,n=n2 	  	1, 4, 9, 16, 25, ...
#           Pentagonal 	  	P5,n=n(3n1)/2 	  	1, 5, 12, 22, 35, ...
#           Hexagonal 	  	P6,n=n(2n1) 	  	1, 6, 15, 28, 45, ...
#           Heptagonal 	  	P7,n=n(5n3)/2 	  	1, 7, 18, 34, 55, ...
#           Octagonal 	  	P8,n=n(3n2) 	  	1, 8, 21, 40, 65, ...
#
#           The ordered set of three 4-digit numbers: 8128, 2882, 8281, has
#           three interesting properties.
#
#           1. The set is cyclic, in that the last two digits of each number is
#               the first two digits of the next number (including the last
#               number with the first).
#           2. Each polygonal type: triangle (P3,127=8128), square (P4,91=8281),
#               and pentagonal (P5,44=2882), is represented by a different
#               number in the set.
#           3. This is the only set of 4-digit numbers with this property.
#
# Written by Chris Gilmer
# Solved:   10/29/2008
# Answer:   28684
#
# Notes:    Some numbers can be more than one type of geometric number (ie all triangular numbers are hexagonal)

#The sum of 28684 for final list [1281, 8128, 2882, 8256, 5625, 2512], count is 111112
#The sum of 28684 for final list [2512, 1281, 8128, 2882, 8256, 5625], count is 111112
#The sum of 28684 for final list [2882, 8256, 5625, 2512, 1281, 8128], count is 111112
#The sum of 28684 for final list [5625, 2512, 1281, 8128, 2882, 8256], count is 111112
#The sum of 28684 for final list [8128, 2882, 8256, 5625, 2512, 1281], count is 111112
#The sum of 28684 for final list [8256, 5625, 2512, 1281, 8128, 2882], count is 111112

from factor import *

def geotest(num):
    if isTriagonal(num):
        return True
    elif isSquare(num):
        return True
    elif isPentagonal(num):
        return True
    elif isHexagonal(num):
        return True
    elif isHeptagonal(num):
        return True
    elif isOctagonal(num):
        return True
    else:
        return False

if __name__ == '__main__':

    upper = 100
    lower = 10

    for adigit in range(lower,upper):
        for bdigit in range(lower,upper):
	    num1 = int(''.join(list(str(adigit)) + list(str(bdigit))))
	    if geotest(num1):
                for cdigit in range(lower,upper):
                    num2 = int(''.join(list(str(bdigit)) + list(str(cdigit))))
		    if geotest(num2):
                        for ddigit in range(lower,upper):
                            num3 = int(''.join(list(str(cdigit)) + list(str(ddigit))))
			    if geotest(num3):
			        for edigit in range(lower,upper):
				    num4 = int(''.join(list(str(ddigit)) + list(str(edigit))))
				    if geotest(num4):
				        for fdigit in range(lower,upper):
					    num5 = int(''.join(list(str(edigit)) + list(str(fdigit))))
					    if geotest(num5):
					        num6 = int(''.join(list(str(fdigit)) + list(str(adigit))))
			                        if geotest(num6):
						
                                                    cyclic_list = [num1, num2, num3, num4, num5, num6]
                                                    total, count = 0, 0

                                                    for num in cyclic_list:
                                                        if isTriagonal(num):
                                                            count += 1
                                                        if isSquare(num):
                                                            count += 10
                                                        if isPentagonal(num):
                                                            count += 100
				                        if isHexagonal(num):
				                            count += 1000
				                        if isHeptagonal(num):
				                            count += 10000
				                        if isOctagonal(num):
				                            count += 100000
                                                        total += num
						    
                                                    if count == 111112: #len(list(str(count))) == 6 and total == 28684:
                                                        print 'The sum of %s for final list %s, count is %s' % (total, cyclic_list, count)
